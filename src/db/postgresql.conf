### 
The configuration files found here can be used to set up synchronous replication. (NOTE: run pg_basebackup yourself.)
## TODO: We can use a replication server to load balance the syncing stuff away from the main custodian.
### /etc/postgresql/10/main/postgresql.conf master 
wal_level = logical
max_wal_senders = 16
wal_keep_segments = 32
synchronous_standby_names = 'captain_hook_replicate'
synchronous_commit = on
listen_addresses = '*'
### /etc/postgresql/10/main/pg_hba.conf master
host    replication     replication_user/all             $REPLICATE_IP/32            md5
### recovery.conf replication (/var/lib...)
standby_mode = 'on'
primary_conninfo = 'application_name=captain_hook_replicate host=$MASTER_IP port=5432 user=replication_user password=PASSWORD'
recovery_target_timeline = 'latest'
### /etc/postgresql/10/main/postgresql.conf replication
wal_level = hot_standby
hot_standby = on
### pg_hba.conf replication

### check =? SELECT pid,usename,application_name,state,sync_state FROM pg_stat_replication;

We can also set up logical replication, which is a bit different, but allows us to disable certain functionalities.
## pg_hba.conf master
host         all            all             $REPLICATE_IP_LOGICAL/32      md5

#- set up captain-hook, or use the default postgres DB instance (on a different server), following schema.sql.
#- create subscription (on postgres, not db)
CREATE SUBSCRIPTION subscribe_rep_hook CONNECTION 'host=$masterip port=5432 password=PASSWORD2 user=replication_user2 dbname=captain-hook' PUBLICATION captain_hook_publication_logical_rep;

#disable delete functionality, this will break UPDATING records as well. 
# we do this by replicating the replication database on the replication server with no DELETE/ UPDATE publishes.
# make another DB on the replication server following schema.sql (CREATE DATABASE captain-hook-replicate)
# add this to the original replication database, and modify pg_hba.conf, /etc/postgresql/10/main/postgresql.conf (uncomment localhost)
CREATE PUBLICATION captain_hook_publication_logical_rep_nested FOR ALL TABLES WITH (publish = 'insert');

# because we replicate on the same host, we need to specify a replication slot to prevent endless looping (@ the unnested replication DB)
SELECT * FROM pg_create_logical_replication_slot('any_slot_name', 'pgoutput'); (pgoutput)?
# add this to the newest DB.
CREATE SUBSCRIPTION subscribe_rep_hook_nested CONNECTION 'host=localhost port=5432 password=PASSWORD2 user=replication_user_nested_replication dbname=postgres' PUBLICATION captain_hook_publication_logical_rep_nested WITH (slot_name = 'any_slot_name', create_slot = 'false');

# This way, the master server cannot influence ... .

It is recommended to create at least one instance of both synchronous and logical replication.
Synchronous replication allows us to recover and check data in the event of a crash. logical replication allows us to recover (all) most data in the event of a security breach of the master server.
